---
title: Using the Terraform Amazon Provider with fixtures
---

<div class="container" style="padding-top: 0px;">
  <div class="row">
    <div class="col-12">
      <div class="jumbotron">
        <h1 class="display-3">
          Terraform Amazon Provider
        </h1>
        <p class="lead">
          This is an example of how to utilize Kitchen-Terraform to test Amazon resources configured with the <a href="https://www.terraform.io/docs/providers/aws/index.html" style="color: #32c850;">Terraform Amazon Provider</a>.
        </p>
        <p class="lead">
          We'll walk through how to use fixtures to reference your Terraform code as a module, use local kitchen.yml files and custom libraries with your Inspec control tests.
        </p>
        <div class="float-right">Author: Aaron Lane</div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-4">
      <div class="list-group" id="list-tab" role="tablist">
        <a class="list-group-item list-group-item-action active" id="list-one-list" data-toggle="list" href="#list-one" role="tab" aria-controls="one">
          1. Requirements & Setup
        </a>
        <a class="list-group-item list-group-item-action" id="list-two-list" data-toggle="list" href="#list-two" role="tab" aria-controls="two">
          2. Create Terraform code
        </a>
        <a class="list-group-item list-group-item-action" id="list-three-list" data-toggle="list" href="#list-three" role="tab" aria-controls="three">
          3. Create Terraform variables
        </a>
        <a class="list-group-item list-group-item-action" id="list-four-list" data-toggle="list" href="#list-four" role="tab" aria-controls="four">
          4. Create Terraform outputs
        </a>
        <a class="list-group-item list-group-item-action" id="list-five-list" data-toggle="list" href="#list-five" role="tab" aria-controls="five">
          5. Setup local kitchen config
        </a>
        <a class="list-group-item list-group-item-action" id="list-six-list" data-toggle="list" href="#list-six" role="tab" aria-controls="six">
          6. Create test fixture
        </a>
        <a class="list-group-item list-group-item-action" id="list-seven-list" data-toggle="list" href="#list-seven" role="tab" aria-controls="seven">
          7. Create custom test library
        </a>
        <a class="list-group-item list-group-item-action" id="list-eight-list" data-toggle="list" href="#list-eight" role="tab" aria-controls="eight">
          8. Create tests
        </a>
        <a class="list-group-item list-group-item-action" id="list-nine-list" data-toggle="list" href="#list-nine" role="tab" aria-controls="nine">
          9. Run tests
        </a>
      </div>
    </div>
    <div class="col-8">
      <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="list-one" role="tabpanel" aria-labelledby="list-one-list">
          AWS credentials must be provided according to the <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#config-settings-and-precedence" style="color: #32c850;">credentials provider chain rules</a>. These credentials must be authorized to manage all of the resources in the Terraform <a href="https://github.com/newcontext-oss/kitchen-terraform/blob/master/examples/aws_provider/module.tf" style="color: #32c850">module</a>.
          <br><br>
          The use of an isolated user as described below is recommended.
          <br><br>
          1. <a href="https://portal.aws.amazon.com/gp/aws/developer/registration/index.html" style="color: #32c850;">Signup</a> for an account or <a href="https://console.aws.amazon.com/" style="color: #32c850;">Signin</a> to the account
          <br>
          2. Create an <a href="https://console.aws.amazon.com/iam/home?region=us-east-1#users" style="color: #32c850">IAM user</a> in the us-east-1 region with API keys and save the Access Key ID and Secret Access Key for use in the example configuration.
          <br>
          3. Add an inline custom policy to the IAM user (example below)
          <br><br>
          <% code("json") do %>
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "Stmt1469773655000",
      "Effect": "Allow",
      "Action": [
        "ec2:*"
      ],
      "Resource": [
        "*"
      ]
    }
  ]
}
          <% end %>
          <hr>
          To setup the repository, run these commands:
          <br><br>
          <% code("bash") do %>
mkdir -p amazon_advance_provider_example/test/integration/example/controls \
         amazon_advance_provider_example/test/integration/example/libraries \
         amazon_advance_provider_example/fixtures/us_east_1

cd amazon_advance_provider_example
          <% end %>
          Create the <p class="font-weight-bold" style="color: #32c850; display: inline;">Gemfile</p> to install our dependencies.
          <br><br>
          <% code("ruby") do %>
source "https://rubygems.org/" do
  gem "kitchen-terraform"
end
          <% end %>
          Install Kitchen-Terraform and other rubygems, install bundler if not installed yet.
          <br><br>
          <% code("bash") do %>
gem install bundler
bundle install
          <% end %>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">.kitchen.yml</p>  which brings together the Terraform module code and Inspec controls.
          <br><br>
          <div class="row">
            <div class="col">
              <% code("yml") do %>
---
driver:
  name: terraform
  root_module_directory: test/fixtures/us_east_1
  parallelism: 4

provisioner:
  name: terraform

transport:
  name: ssh

verifier:
  name: terraform
  groups:
    -
      name: remote
      attributes:
        overridden_security_group: security_group
      controls:
        - reachable_other_host
        - remote_security_group
        - running_service
      hostnames: test_target_public_dns
      port: 22
      username: ubuntu
    -
      name: local
      controls:
        - local_security_group
        - state_file







platforms:
  - name: ubuntu

suites:
  - name: example



              <% end %>
            </div>
            <div class="col">
              The Kitchen-Terraform driver is configured to use the us-east-1 test fixture configuration and to use 4 concurrent operations in its actions.
              <br><br>
              The Kitchen-Terraform provisioner is enabled.
              <br><br>
              The Test Kitchen SSH transport is enabled.
              <br><br>
              The Kitchen-Terraform verifier is configured with two groups, remote and local.
              <br><br>
              The remote group uses the value of the security_group output to define an Inspec control attribute named overridden_security_group and includes some of the controls of the profile of the suite.
              <br><br>
              The group uses the value of the test_target_public_dns output to obtain the hostnames to execute the controls on and provides a static port and username based on the AMI used in the example module.
              <br><br>
              The local group omits the hostnames setting, which means that its specified controls will be executed locally rather than remotely on a server in the Terraform state.
              <br><br><br>
              The platforms provide arbitrary grouping for the test suite matrix.
              <br><br>
              The suite name corresponds to the directory containing the Inspec profile: <% code("bash") do %>test/integration/example/<% end %>
            </div>
          </div>
        </div>
        <div class="tab-pane fade" id="list-two" role="tabpanel" aria-labelledby="list-two-list">
          Example Terraform code using the Amazon provider is below. The resources created by this code is what we'll be testing later on.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">main.tf</p> and add each block of code into it.
          <br><br>
          The configuration is restricted to Terraform versions equal to or greater than 0.10.2 and less than 0.11.0.
          <% code("ruby") do %>
terraform {
  required_version = "~> 0.10.2"
}
          <% end %>
          The module configures the AWS Provider to manage resources in a variable region.
          <br><br>
          <% code("ruby") do %>
provider "aws" {
  region  = "${var.provider_region}"
  version = "~> 0.1"
}
          <% end %>
          The module configures a virtual private cloud with two instances and adequate network egress and ingress to allow internal communication as well communication with localhost.
          <br><br>
          <% code("ruby") do %>
resource "aws_vpc" "example" {
  cidr_block           = "192.168.0.0/16"
  enable_dns_hostnames = "true"

  tags {
    Name = "kitchen_terraform_example"
  }
}

resource "aws_subnet" "example" {
  availability_zone       = "${var.subnet_availability_zone}"
  cidr_block              = "192.168.1.0/24"
  map_public_ip_on_launch = "true"
  vpc_id                  = "${aws_vpc.example.id}"

  tags {
    Name = "kitchen_terraform_example"
  }
}

resource "aws_internet_gateway" "example" {
  vpc_id = "${aws_vpc.example.id}"

  tags {
    Name = "kitchen_terraform_example"
  }
}

resource "aws_route_table" "example" {
  vpc_id = "${aws_vpc.example.id}"

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = "${aws_internet_gateway.example.id}"
  }

  tags {
    Name = "kitchen_terraform_example"
  }
}

resource "aws_route_table_association" "example" {
  subnet_id      = "${aws_subnet.example.id}"
  route_table_id = "${aws_route_table.example.id}"
}

resource "aws_security_group" "example" {
  description = "Allow all inbound traffic"
  name        = "kitchen-terraform-example"
  vpc_id      = "${aws_vpc.example.id}"

  egress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 0
    protocol    = "-1"
    to_port     = 0
  }

  ingress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 0
    protocol    = "-1"
    to_port     = 0
  }

  tags {
    Name      = "kitchen-terraform-example"
    Terraform = "true"
  }
}

resource "aws_key_pair" "example" {
  key_name   = "kitchen-terraform-example"
  public_key = "${var.key_pair_public_key}"
}

resource "aws_instance" "reachable_other_host" {
  ami                         = "${var.instances_ami}"
  associate_public_ip_address = true
  instance_type               = "t2.micro"
  key_name                    = "${aws_key_pair.example.key_name}"
  vpc_security_group_ids      = ["${aws_security_group.example.id}"]
  subnet_id                   = "${aws_subnet.example.id}"

  tags {
    Name      = "kitchen-terraform-reachable-other-host"
    Terraform = "true"
  }
}

resource "aws_instance" "test_target" {
  ami                    = "${var.instances_ami}"
  count                  = 2
  instance_type          = "t2.micro"
  key_name               = "${aws_key_pair.example.key_name}"
  subnet_id              = "${aws_subnet.example.id}"
  vpc_security_group_ids = ["${aws_security_group.example.id}"]

  tags {
    Name      = "kitchen-terraform-test-target-${count.index}"
    Terraform = "true"
  }
}
          <% end %>
        </div>
        <div class="tab-pane fade" id="list-three" role="tabpanel" aria-labelledby="list-three-list">
          The module requires an instances AMI, a key pair public key, a provider region, and a subnet availability zone to be provided as inputs.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">variable.tf</p> and add the below block of code into it.
          <br><br>
          <% code("ruby") do %>
variable "instances_ami" {
  description = "The AMI of the instances"
  type        = "string"
}

variable "key_pair_public_key" {
  description = "The public key of the key pair"
  type        = "string"
}

variable "provider_region" {
  description = "The geographic area in which the provider will place resources"
  type        = "string"
}

variable "subnet_availability_zone" {
  description = "The isolated, regional location in which to place the subnet"
  type        = "string"
}
          <% end %>
        </div>
        <div class="tab-pane fade" id="list-four" role="tabpanel" aria-labelledby="list-four-list">
          To assist in testing, Terraform outputs will provide information about both servers and what security group they are associated with. The Kitchen-Terraform verifier can use these artifacts to validate the Terraform code.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">output.tf</p> and add each block of code into it.
          <br><br>
          <% code("ruby") do %>
output "reachable_other_host_public_ip" {
  description = "The public IP address of the reachable_other_host instance"
  value       = "${aws_instance.reachable_other_host.public_ip}"
}

output "security_group" {
  description = "The name of the security group"
  value       = "${aws_security_group.example.name}"
}

output "test_target_public_dns" {
  description = "The list of public DNS names assigned to the test_target instances"
  value       = ["${aws_instance.test_target.*.public_dns}"]
}
          <% end %>
          Refer back to the .kitchen.yml and in the verifier section you will see a reference to the above outputs.
        </div>
        <div class="tab-pane fade" id="list-five" role="tabpanel" aria-labelledby="list-five-list">
          Public and private key configuration attributes must be provided in a local Test Kitchen configuration. This demonstrates how <a href="http://www.stuartellis.name/articles/erb/" style="color: #32c850">embedded Ruby</a> can be used in Test Kitchen configuration.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">.kitchen.local.yml</p> and add the block of code into it.
          <br><br>
          <% code("yml") do %>
---
driver:
  variables:
    key_pair_public_key: "<%%= ::File.read '/path/to/public/key' %>"
transport:
  ssh_key: "/path/to/private/key"
          <% end %>
          Be sure to create your own SSH key pair!
        </div>
        <div class="tab-pane fade" id="list-six" role="tabpanel" aria-labelledby="list-six-list">
          To more closely mimic Terraform code that will call your Terraform module, we'll call the code that is in the root directory as a module.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/fixtures/us_east_1/main.tf</p> and add the block of code into it.
          <br><br>
          <% code("ruby") do %>
terraform {
  required_version = "~> 0.10.2"
}
          <% end %>
          The configuration requires a key pair public key to be provided as an input.
          <br><br>
          <% code("ruby") do %>
variable "public_key_material" {
  description = "The public key material to use for SSH authentication with the instances"
  type        = "string"
}
          <% end %>
          The configuration includes the module and provides values specific to the us-east-1 region for the variable inputs. Pay close attention to the module block, where it references the module source three directories up.
          <br><br>
          <% code("ruby") do %>
module "example" {
  instances_ami            = "ami-1d4e7a66"
  key_pair_public_key      = "${var.public_key_material}"
  provider_region          = "us-east-1"
  source                   = "../../../"
  subnet_availability_zone = "us-east-1b"
}
          <% end %>
          The configuration forwards the outputs of the module.
          <br><br>
          <% code("ruby") do %>
output "reachable_other_host_public_ip" {
  description = "The public IP address of the reachable_other_host instance"
  value       = "${module.example.reachable_other_host_public_ip}"
}

output "security_group" {
  description = "The name of the security group"
  value       = "${module.example.security_group}"
}

output "test_target_public_dns" {
  description = "The list of public DNS names assigned to the test_target instances"
  value       = ["${module.example.test_target_public_dns}"]
}
          <% end %>
        </div>
        <div class="tab-pane fade" id="list-seven" role="tabpanel" aria-labelledby="list-seven-list">
          With Ruby & Inspec you can have custom libraries to reference within your control tests.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/libraries/ec2_instance.rb</p> and add the block of code into it.
          <br><br>
          <% code("ruby") do %>
# frozen_string_literal: true

# Resource representing an EC2 instance
class EC2Instance < Inspec.resource 1
  name "ec2_instance"

  def security_groups
    inspec.command("curl http://169.254.169.254/latest/meta-data/security-groups").stdout
  end
end
          <% end %>
        </div>
        <div class="tab-pane fade" id="list-eight" role="tabpanel" aria-labelledby="list-eight-list">
          We've created the Terraform code, now it's time to create the Inspec control tests. Please see the <a href="https://www.inspec.io/docs/reference/profiles/" style="color: #32c850;">Inspec documentation</a> to learn more about profiles and controls.
          <br><br>
          Create a default profile file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/inspec.yml</p>
          <br><br>
          <% code("yml") do %>
---
name: default
          <% end %>
          Referring back to the .kitchen.yml file and inside the verifier section there is a reachable_other_host control which we need to create.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/controls/reachable_other_host_spec.rb</p>
          <br><br>
          <% code("ruby") do %>
# frozen_string_literal: true

reachable_other_host_public_ip =
  attribute(
    "reachable_other_host_public_ip",
    {}
  )

control "reachable_other_host" do
  describe "the other host" do
    subject do
      host reachable_other_host_public_ip
    end

    it do
      is_expected.to be_reachable
    end
  end
end
          <% end %>
          Let's create the remote_security_group control, which will validate the security group.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/controls/remote_security_group.rb</p>
          <br><br>
          <% code("ruby") do %>
# frozen_string_literal: true

security_group = attribute "security_group", {}
overridden_security_group = attribute "overridden_security_group", {}

control "remote_security_group" do
  describe "the `security_group` output" do
    subject do ec2_instance.security_groups end

    it "is mapped to the `security_group` attribute" do is_expected.to eq security_group end

    it "equals the `overridden_security_group` attribute" do is_expected.to eq overridden_security_group end
  end
end
          <% end %>
          Let's create the running_service control, which will validate the security group.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/ integration/example/controls/running_service_spec.rb</p>
          <br><br>
          <% code("ruby") do %>
# frozen_string_literal: true

control "running_service" do
  describe "the cron service" do
    subject do service "cron" end

    it "is running" do is_expected.to be_running end
  end
end
          <% end %>
          Let's create the local_security_group control, which will validate the security group's egress and ingress with the <a href="https://rubygems.org/gems/awspec" style="color: #32c850;">awspec gem</a>
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/controls/local_security_group.rb</p>
          <br><br>
          <% code("ruby") do %>
# frozen_string_literal: true

require "awspec"

control "local_security_group" do
  describe "the security group" do
    let :example_security_group do security_group "kitchen-terraform-example" end

    describe "ingress" do
      subject do example_security_group.inbound end

      it "is open to the world" do is_expected.to be_opened.for "0.0.0.0/0" end
    end

    describe "egress" do
      subject do example_security_group.outbound end

      it "is open to the world" do is_expected.to be_opened.for "0.0.0.0/0" end
    end
  end
end
          <% end %>
          Let's create the state_files control, which will validate the local Terraform state file is created and has the proper content.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/controls/state_file.rb</p>
          <br><br>
          <% code("ruby") do %>
# frozen_string_literal: true

terraform_state = attribute "terraform_state", {}

control "state_file" do
  describe "the Terraform state file" do
    subject do json(terraform_state).terraform_version end

    it "is accessible" do is_expected.to match /\d+\.\d+\.\d+/ end
  end
end
          <% end %>
        </div>
        <div class="tab-pane fade" id="list-nine" role="tabpanel" aria-labelledby="list-nine-list">
          Execute Kitchen-Terraform by running these commands
          <br><br>
          <% code("ruby") do %>
# Create resources from the Terraform fixture code that references main.tf
bundle exec kitchen converge

# Run the Inspec controls from the .kitchen.yml verifier section
bundle exec kitchen verify
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
