---
title: Using the Terraform Docker Provider
---

<div class="container" style="padding-top: 0px;">
  <div class="row">
    <div class="col-12">
      <div class="jumbotron">
        <h1 class="display-3">
          Terraform Docker Provider
        </h1>
        <p class="lead">
          This is an example of how to utilize Kitchen-Terraform to test a Docker container running on localhost configured with the <a href="https://www.terraform.io/docs/providers/docker/index.html" style="color: #32c850;">Terraform Docker Provider</a>.
        </p>
        <div class="float-right">Author: Erik R. Rygg</div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-4">
      <div class="list-group" id="list-tab" role="tablist">
        <a class="list-group-item list-group-item-action active" id="list-one-list" data-toggle="list" href="#list-one" role="tab" aria-controls="one">
          1. Requirements & Setup
        </a>
        <a class="list-group-item list-group-item-action" id="list-two-list" data-toggle="list" href="#list-two" role="tab" aria-controls="two">
          2. Create Terraform code
        </a>
        <a class="list-group-item list-group-item-action" id="list-three-list" data-toggle="list" href="#list-three" role="tab" aria-controls="three">
          3. Create Terraform outputs
        </a>
        <a class="list-group-item list-group-item-action" id="list-four-list" data-toggle="list" href="#list-four" role="tab" aria-controls="four">
          4. Create tests
        </a>
        <a class="list-group-item list-group-item-action" id="list-five-list" data-toggle="list" href="#list-five" role="tab" aria-controls="five">
          5. Run tests
        </a>
      </div>
    </div>
    <div class="col-8">
      <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="list-one" role="tabpanel" aria-labelledby="list-one-list">
          Requirements are a Docker host listening on the Unix socket located at: unix://localhost/var/run/docker.sock.
          <br><br>
          The Docker container to be tested must be running an SSH daemon in the foreground to enable the Kitchen-Terraform verifier to remotely execute tests.
          <br><hr>
          To setup the repository, run these commands:
          <br><br>
          <% code("bash") do %>
mkdir -p docker_provider_example/test/integration/example/controls
cd docker_provider_example
          <% end %>
          Create the <p class="font-weight-bold" style="color: #32c850; display: inline;">Gemfile</p> to install our dependencies.
          <br><br>
          <% code("ruby") do %>
source "https://rubygems.org/" do
  gem "kitchen-terraform"
end
          <% end %>
          Install Kitchen-Terraform and other rubygems, install bundler if not installed yet.
          <br><br>
          <% code("bash") do %>
gem install bundler
bundle install
          <% end %>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">.kitchen.yml</p> which brings together the Terraform module code and Inspec controls.
          <br><br>
          <div class="row">
            <div class="col">
              <% code("yml") do %>
---
driver:
  name: terraform

provisioner:
  name: terraform

transport:
  name: ssh
  password: root

verifier:
  name: terraform
  groups:
    - name: container
      controls:
        - operating_system
      port: 2222
      hostnames: hostnames
    - name: localhost
      controls:
        - state_files

platforms:
  - name: ubuntu

suites:
  - name: example


              <% end %>
            </div>
            <div class="col">
              <br><br>
              The Kitchen-Terraform driver is enabled.
              <br><br><br>
              The Kitchen-Terraform provisioner is enabled.
              <br><br><br>
              The Test Kitchen SSH transport is configured to use password authentication.
              <br><br><br>
              The Kitchen-Terraform verifier is configured with two groups.
              <br><br>
              The container group includes a control for the operating system of the Docker container.
              <br><br>
              Iterating over the elements of the Terraform hostnames output (see creating outputs step), the verifier will run the control against localhost over SSH on port 2222.
              <br><br><br>
              The platforms provide arbitrary grouping for the test suite matrix.
              <br><br>
              The suite name corresponds to the directory containing the Inspec profile: <% code("bash") do %>test/integration/example/<% end %>
            </div>
          </div>
        </div>
        <div class="tab-pane fade" id="list-two" role="tabpanel" aria-labelledby="list-two-list">
          Example Terraform code using the Docker provider is below. The resources created by this code is what we'll be testing later on.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">main.tf</p> and add each block of code into it.
          <br><br>
          The configuration is restricted to Terraform versions equal to or greater than 0.10.2 and less than 0.11.0. The local backend is configured to demonstrate support for backends.
          <br><br>
          <% code("ruby") do %>
terraform {
  required_version = "~> 0.10.2"

  backend "local" {
    path = "local.tfstate"
  }
}
          <% end %>
          The Docker provider is configured to communicate with a Docker host listening on a Unix socket on localhost.
          <br><br>
          <% code("ruby") do %>
provider "docker" {
  host    = "unix://localhost/var/run/docker.sock"
  version = "~> 0.1"
}
          <% end %>
          A SSH daemon Docker image from the public registry is configured as a data source.
          <br><br>
          <% code("ruby") do %>
data "docker_registry_image" "ubuntu" {
  name = "rastasheep/ubuntu-sshd:latest"
}
          <% end %>
          A Docker image is configured on the Docker host using the data source.
          <br><br>
          <% code("ruby") do %>
resource "docker_image" "ubuntu" {
  keep_locally  = true
  name          = "${data.docker_registry_image.ubuntu.name}"
  pull_triggers = ["${data.docker_registry_image.ubuntu.sha256_digest}"]
}
          <% end %>
          A Docker container based on the Docker image is configured to be running on the Docker host. The container forwards localhost:2222 to its internal SSH daemon.
          <br><br>
          <% code("ruby") do %>
resource "docker_container" "ubuntu" {
  image    = "${docker_image.ubuntu.name}"
  must_run = true
  name     = "ubuntu_container"

  ports {
    external = 2222
    internal = 22
  }
}
          <% end %>
        </div>
        <div class="tab-pane fade" id="list-three" role="tabpanel" aria-labelledby="list-three-list">
          To assist in testing, Terraform outputs will provide the path of the backend state file and the localhost hostname. The Kitchen-Terraform verifier can use these artifacts to validate the Terraform code.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">output.tf</p> and add each block of code into it.
          <br><br>
          <% code("ruby") do %>
output "backend_state" {
  description = "The path to the backend state file"
  value       = "${path.module}/local.tfstate"
}

output "hostnames" {
  description = "The hostnames to test"
  value       = ["localhost"]
}
          <% end %>
          Refer back to the .kitchen.yml and in the verifier section you will see a reference to the above hostnames output.
        </div>
        <div class="tab-pane fade" id="list-four" role="tabpanel" aria-labelledby="list-four-list">
          We've created the Terraform code, now it's time to create the Inspec control tests. Please see the <a href="https://www.inspec.io/docs/reference/profiles/" style="color: #32c850;">Inspec documentation</a> to learn more about profiles and controls.
          <br><br>
          Create a default profile file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/inspec.yml</p>
          <br><br>
          <% code("yml") do %>
---
name: default
          <% end %>
          Referring back to the .kitchen.yml file and inside the verifier section there is an operating_system control which we need to create.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/controls/operating_system.rb</p>
          <% code("ruby") do %>
# frozen_string_literal: true

control "operating_system" do
  describe "the operating system" do
    subject do command("lsb_release -a").stdout end

    it "is Ubuntu" do is_expected.to match /.*Ubuntu.*/ end
  end
end
          <% end %>
          Let's create the state_files control, which will validate the local Terraform state file is created and has the proper content.
          <br><br>
          Create this file <p class="font-weight-bold" style="color: #32c850; display: inline;">test/integration/example/controls/state_file.rb</p>
          <% code("ruby") do %>
# frozen_string_literal: true

backend_state =
attribute(
"backend_state",
{}
)

configured_state =
attribute(
"terraform_state",
{}
)

control "state_files" do
describe "the backend state file" do
subject do
file backend_state
end

it do
is_expected.to exist
end
end

  describe "the configured state file" do
    subject do
      file configured_state
    end

    it do
      is_expected.to_not exist
    end
  end
end
          <% end %>
        </div>
        <div class="tab-pane fade" id="list-five" role="tabpanel" aria-labelledby="list-five-list">
          Execute Kitchen-Terraform by running these commands
          <br><br>
          <% code("ruby") do %>
# Create resources from the Terraform code in main.tf
bundle exec kitchen converge

# Run the Inspec controls from the .kitchen.yml verifier section
bundle exec kitchen verify
          <% end %>
          Below is example output of Kitchen-Terraform running.
          <br><br>
          <% code("bash") do %>
-----> Starting Kitchen (v<x.x.x.>)
       Terraform v<x.x.x.>

$$$$$$ Terraform version <x.x.x.> is supported
-----> Testing <example-ubuntu>
-----> Creating <example-ubuntu>...
       Copying configuration from "docker_provider"...

       Initializing the backend...

       Successfully configured the backend "local"! Terraform will automatically
       use this backend unless the backend configuration changes.

       Initializing provider plugins...
       - Checking for available provider plugins on https://releases.hashicorp.com...
       - Downloading plugin for provider "docker" (<x.x.x.>)...

       Terraform has been successfully initialized!

       You may now begin working with Terraform. Try running "terraform plan" to see
       any changes that are required for your infrastructure. All Terraform commands
       should now work.

       If you ever set or change modules or backend configuration for Terraform,
       rerun this command to reinitialize your working directory. If you forget, other
       commands will detect it and remind you to do so if necessary.
       data.docker_registry_image.ubuntu: Refreshing state...
       docker_image.ubuntu: Creating...
         keep_locally:             "" => "true"
         latest:                   "" => "<computed>"
         name:                     "" => "rastasheep/ubuntu-sshd:latest"
         pull_triggers.#:          "" => "1"
         pull_triggers.2359657619: "" => "sha256:552227a92aefad9981f3e284a652cc22b54eda63f7a4ddd4db628b3cd12784f5"
       docker_image.ubuntu: Creation complete after 1s (ID: sha256:ae51c8f5e14e6fc277fa6fce44bf7178...3a13eb5b4rastasheep/ubuntu-sshd:latest)
       docker_container.ubuntu: Creating...
         bridge:                   "" => "<computed>"
         gateway:                  "" => "<computed>"
         image:                    "" => "rastasheep/ubuntu-sshd:latest"
         ip_address:               "" => "<computed>"
         ip_prefix_length:         "" => "<computed>"
         log_driver:               "" => "json-file"
         must_run:                 "" => "true"
         name:                     "" => "ubuntu_container"
         ports.#:                  "" => "1"
         ports.265401579.external: "" => "2222"
         ports.265401579.internal: "" => "22"
         ports.265401579.ip:       "" => ""
         ports.265401579.protocol: "" => "tcp"
         restart:                  "" => "no"
       docker_container.ubuntu: Creation complete after 1s (ID: 0801b683b3f63cc1acc895ac900071448c1efb9e0bc4b160564d00c761ba56e9)

       Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

       The state of your infrastructure has been saved to the path
       below. This state is required to modify and destroy your
       infrastructure, so keep it safe. To inspect the complete state
       use the `terraform show` command.

       State path: local.tfstate

       Outputs:

       backend_state = docker_provider/.kitchen/kitchen-terraform/example-ubuntu/local.tfstate
       hostnames = [
           localhost
       ]
       Finished creating <example-ubuntu> (0m46.74s).
-----> Converging <example-ubuntu>...
       Copying configuration from "docker_provider"...

       Initializing the backend...

       Initializing provider plugins...
       - Checking for available provider plugins on https://releases.hashicorp.com...
       - Downloading plugin for provider "docker" (<x.x.x.>)...

       Terraform has been successfully initialized!

       You may now begin working with Terraform. Try running "terraform plan" to see
       any changes that are required for your infrastructure. All Terraform commands
       should now work.

       If you ever set or change modules or backend configuration for Terraform,
       rerun this command to reinitialize your working directory. If you forget, other
       commands will detect it and remind you to do so if necessary.
       data.docker_registry_image.ubuntu: Refreshing state...
       docker_image.ubuntu: Refreshing state... (ID: sha256:ae51c8f5e14e6fc277fa6fce44bf7178...3a13eb5b4rastasheep/ubuntu-sshd:latest)
       docker_container.ubuntu: Refreshing state... (ID: 0801b683b3f63cc1acc895ac900071448c1efb9e0bc4b160564d00c761ba56e9)

       Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

       Outputs:

       backend_state = docker_provider/.kitchen/kitchen-terraform/example-ubuntu/local.tfstate
       hostnames = [
           localhost
       ]
       Finished converging <example-ubuntu> (0m44.77s).
-----> Setting up <example-ubuntu>...
       Finished setting up <example-ubuntu> (0m0.00s).
-----> Verifying <example-ubuntu>...
       {
           "backend_state": {
              "sensitive": false,
              "type": "string",
              "value": "docker_provider/.kitchen/kitchen-terraform/example-ubuntu/local.tfstate"
           },
           "hostnames": {
              "sensitive": false,
              "type": "list",
              "value": [
                  "localhost"
              ]
           }
       }
       Verifying host 'localhost' of group 'container'
       {
           "backend_state": {
              "sensitive": false,
              "type": "string",
              "value": "docker_provider/.kitchen/kitchen-terraform/example-ubuntu/local.tfstate"
           },
           "hostnames": {
              "sensitive": false,
              "type": "list",
              "value": [
                  "localhost"
              ]
           }
       }
       Loaded default

Profile: default
Version: (not specified)
Target:  local://

  ✔  operating_system: the operating system is Ubuntu
     ✔  the operating system is Ubuntu

Profile Summary: 1 successful control, 0 control failures, 0 controls skipped
Test Summary: 1 successful, 0 failures, 0 skipped
       Verifying host 'localhost' of group 'localhost'
       {
           "backend_state": {
              "sensitive": false,
              "type": "string",
              "value": "docker_provider/.kitchen/kitchen-terraform/example-ubuntu/local.tfstate"
           },
           "hostnames": {
              "sensitive": false,
              "type": "list",
              "value": [
                  "localhost"
              ]
           }
       }
       Loaded default

Profile: default
Version: (not specified)
Target:  local://

  ✔  state_files: the backend state file should exist; the configured state fi...
     ✔  the backend state file should exist
     ✔  the configured state file should not exist

Profile Summary: 1 successful control, 0 control failures, 0 controls skipped
Test Summary: 2 successful, 0 failures, 0 skipped
       Finished verifying <example-ubuntu> (0m0.53s).
-----> Destroying <example-ubuntu>...
       Copying configuration from "docker_provider"...

       Initializing the backend...

       Initializing provider plugins...
       - Checking for available provider plugins on https://releases.hashicorp.com...
       - Downloading plugin for provider "docker" (<x.x.x.>)...

       Terraform has been successfully initialized!

       You may now begin working with Terraform. Try running "terraform plan" to see
       any changes that are required for your infrastructure. All Terraform commands
       should now work.

       If you ever set or change modules or backend configuration for Terraform,
       rerun this command to reinitialize your working directory. If you forget, other
       commands will detect it and remind you to do so if necessary.
       data.docker_registry_image.ubuntu: Refreshing state...
       docker_image.ubuntu: Refreshing state... (ID: sha256:ae51c8f5e14e6fc277fa6fce44bf7178...3a13eb5b4rastasheep/ubuntu-sshd:latest)
       docker_container.ubuntu: Refreshing state... (ID: 0801b683b3f63cc1acc895ac900071448c1efb9e0bc4b160564d00c761ba56e9)
       docker_container.ubuntu: Destroying... (ID: 0801b683b3f63cc1acc895ac900071448c1efb9e0bc4b160564d00c761ba56e9)
       docker_container.ubuntu: Destruction complete after 0s
       docker_image.ubuntu: Destroying... (ID: sha256:ae51c8f5e14e6fc277fa6fce44bf7178...3a13eb5b4rastasheep/ubuntu-sshd:latest)
       docker_image.ubuntu: Destruction complete after 0s

       Destroy complete! Resources: 2 destroyed.
       Finished destroying <example-ubuntu> (0m45.17s).
       Finished testing <example-ubuntu> (3m3.38s).
-----> Kitchen is finished. (3m8.81s)
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
